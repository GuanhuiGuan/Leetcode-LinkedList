# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1 and not l2:
            return [];
        
        root = l = ListNode(0);
        
        while l1 and l2:
            if l1.val < l2.val:
                l.next = ListNode(l1.val);
                l1 = l1.next;
            else:
                l.next = ListNode(l2.val);
                l2 = l2.next;
            l = l.next;
        if l1:
            l.next = l1;
        else:
            l.next = l2;
        return root.next;
        
        
//Cpp version Iteration
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode root(0);
        ListNode *newList = &root;
        while(l1 && l2){
            if(l1->val < l2->val){
                newList->next = l1;
                l1 = l1->next;
            }
            else{
                newList->next = l2;
                l2 = l2->next;
                }
            newList = newList->next;
            }
        if(l1){
            newList->next = l1;
        }else{
            newList->next = l2;
        }
        return root.next;
    }
};
//________________Recursive_____
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1){return l2;}
        if(!l2){return l1;}
        if (l1->val < l2->val){
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l2->next, l1);
            return l2;
        }
        
    }
};
