/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 //__________Align Two Lists at the same starting node______________
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int la = length(headA), lb = length(headB);//move two lists to the same starting points
        while(la > lb){headA = headA.next; la--;}
        while(la < lb){headB = headB.next; lb--;}
        while(headA != headB){headA = headA.next; headB = headB.next;}
        return headA;
    }
    public int length(ListNode node){
        int l = 0;
        while(node != null){node = node.next; l++;}
        return l;
    }
}
//____________Align Through Iterations(2 loops)_______________
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null)  return null;
        ListNode a = headA, b = headB;
        //equal length: both reach null or intersection
        //otherwise the first loop aligns both pointers and we have two lists of equal lengths
        while(a != b){
            a = (a == null) ? headB : a.next;
            b = (b == null) ? headA : b.next;
        }
        return a;
    }
}
