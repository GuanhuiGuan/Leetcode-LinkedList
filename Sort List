/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        // merge sort
        
        if(head == null || head.next == null)    return head;
        
        // 1. use fast and slow pointers to cut into two halves
        ListNode preEnd = null, postStart = head, postEnd = head;
        while(postEnd != null && postEnd.next != null){
            preEnd = postStart;
            postStart = postStart.next;
            postEnd = postEnd.next.next;
        }
        preEnd.next = null;
        
        // 2. sort two halves
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(postStart);
        
        // 3. merge 2 lists
        ListNode node = merge(l1, l2);
        
        return node;
    }
    
    public ListNode merge(ListNode l1, ListNode l2){
        ListNode node = new ListNode(0), root = node;
        
        while(l1 != null & l2 != null){
            if(l1.val < l2.val){
                node.next = l1;
                l1 = l1.next;
            }
            else{
                node.next = l2;
                l2 = l2.next;
            }
            node = node.next;
        }
        if(l1 != null)  node.next = l1;
        if(l2 != null)  node.next = l2;
        
        return root.next;
    }
}
